<launch>

<!-- Launch Task-5 Simulation Environment in Gazebo -->

<include file="$(find pkg_vb_sim)/launch/task6_simulation.launch" />

 <group ns="ur5_1">
    <!-- <rosparam command="load" file="$(find pkg_moveit_ur5)/config/joint_names.yaml" /> -->

    <include file="$(find pkg_moveit_ur5_1_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>

    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/joint_states]</rosparam>
    </node>

    <include file="$(find pkg_moveit_ur5_1_config)/launch/move_group.launch">
      <arg name="publish_monitored_planning_scene" value="true"/>
    </include>
    <include file="$(find pkg_moveit_ur5_1_config)/launch/moveit_rviz_robot1.launch">
      <arg name="config" value="true"/>
    </include>
  </group>


  <group ns="ur5_2">
    <!-- <rosparam command="load" file="$(find pkg_moveit_ur5)/config/joint_names.yaml" /> -->

    <include file="$(find pkg_moveit_ur5_2_config)/launch/planning_context.launch">
      <arg name="load_robot_description" value="true"/>
    </include>


    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/joint_states]</rosparam>
    </node>

    <include file="$(find pkg_moveit_ur5_2_config)/launch/move_group.launch">
      <arg name="publish_monitored_planning_scene" value="true"/>
    </include>
    <include file="$(find pkg_moveit_ur5_2_config)/launch/moveit_rviz_robot2.launch">
      <arg name="config" value="true"/>
    </include>

    <arg name="scene_file" default="$(find pkg_task5)/config/rviz/task5_ur5_2_scene.scene"/> 
    <node name = "moveit_publish_scene_from_text" pkg= "moveit_ros_planning" type = "moveit_publish_scene_from_text" args= "$(arg scene_file)"/>

  </group>



<!-- Run Task-5 simple action server used for sorting which picks and places on the belt  -->
<node name= "task5_ur5_1_server" pkg= "pkg_task5" type="task5_ur5_1_server.py" output="screen"/>

<!-- Run Task-5 simple action server used for sorting which picks and places in the respective bin  -->
<node name= "task5_ur5_2_server" pkg= "pkg_task5" type="task5_ur5_2_server.py" output="screen"/>

<!-- Run Ros Iot Bridge action server used for uploading data , publishing and subscribing to mqtt client   -->
<rosparam file="$(find pkg_ros_iot_bridge)/config/config_pyiot.yaml" />
<node name= "task5_ros_iot_server" pkg= "pkg_ros_iot_bridge" type="node_action_server_ros_iot_bridge.py" output="screen"/>




<!-- Run Task-5 simple action server client which coordinates among the servers and finds out the colors of packages  -->
<node name= "task5_main" pkg= "pkg_task5" type="task5_main.py" output="screen"/>



<!-- Recording Bag File for Submission -->
    <arg name="record" default="false"/>
    <arg name="rec_name" default="t5.bag"/>

    <group if="$(arg record)">
        <node name="rosbag_record_pick" pkg="rosbag" type="record"
       args="record -O $(find pkg_task5)/bag_files/$(arg rec_name) --chunksize=10 /eyrc/vb/ur5_1/vacuum_gripper/logical_camera/ur5_1 /eyrc/vb/ur5_2/vacuum_gripper/logical_camera/ur5_2" output="screen"/>
 </group>



</launch>
